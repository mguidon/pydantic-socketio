# generated by datamodel-codegen:
#   filename:  tmpucl9knkm
#   timestamp: 2020-03-17T09:10:18+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, conint


class KeyboardInput(BaseModel):
    keyCode: int
    modifiers: int = Field(
        ..., description='bitmask: 0 = none, 1 = Shift, 2 = Ctrl, 4 = Alt'
    )


class LoadDocument(BaseModel):
    fileName: str = Field(..., description='filename inlcuding .smash')


class ModelEntities(BaseModel):
    pass


class Type(Enum):
    up = 'up'
    down = 'down'
    move = 'move'
    dbl = 'dbl'
    wheel = 'wheel'


class Options(BaseModel):
    pass


class Properties(BaseModel):
    pass


class Quality(BaseModel):
    quality: conint(ge=0.0, le=100.0) = Field(
        ..., description='0 means no compression, 100 lossless, default 75'
    )


class RenderImage(BaseModel):
    pass


class Resize(BaseModel):
    height: int
    width: int


class ScreenPosition(BaseModel):
    x: int
    y: int


class Tool(BaseModel):
    enabled: Optional[bool] = True
    icon: Optional[str] = None
    id: str
    label: str
    selected: Optional[bool] = False
    tooltip: str


class ToolCategory(BaseModel):
    name: str
    tools: List[Tool]


class MouseInput(BaseModel):
    button: Optional[int] = Field(
        None, description='0 = none, 1 = left, 2 = middle, 3 = right'
    )
    delta: Optional[int] = Field(None, description='Mouse wheel delta, +/- 120')
    modifiers: Optional[int] = Field(
        None, description='bitmask: 0 = none, 1 = Shift, 2 = Ctrl, 4 = Alt'
    )
    pos: ScreenPosition
    type: Type


class OverlayMeasure(BaseModel):
    id: str
    pos: ScreenPosition
    unit: str
    value: str
